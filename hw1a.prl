#!/usr/local/bin/perl

##########################################################
##  EXAMPLE SHELL FOR END-OF-SENTENCE CLASSIFIER
##
##    examp1.prl < sent.data.train | more
##
##  Suggestion: run in a wide window
##########################################################


$L="/home/1/yarowsky/cs466/hw1/classes";

&initialize_set(*abbrevs,"$L/abbrevs"); 
&initialize_set(*titles,"$L/titles"); 
&initialize_set(*unlikely_proper_nouns,"$L/unlikely_proper_nouns"); 
&initialize_set(*timeterms,"$L/timeterms"); 
&initialize_set(*sentence_internal,"$L/sentence_internal"); 

# print the first chunk of the ARFF file
open($file, '>', 'fullstop_data.arff');
print $file "\@RELATION fullstop\n
             \@ATTRIBUTE three_before_numeric {TRUE, FALSE}\n
             \@ATTRIBUTE two_before_type {fullstop, numeric, other}\n
             \@ATTRIBUTE two_after_fullstop {TRUE, FALSE}\n
             \@ATTRIBUTE one_after_type {lower, capital_common, np, comma, fullstop, numeric, quotes, other}\n
             \@ATTRIBUTE one_before_type {title, abbrev, internal, quotes, other}\n
             \@ATTRIBUTE one_before_contains_fullstop {TRUE, FALSE}\n
             \@ATTRIBUTE one_before__capitals integer\n
             \@ATTRIBUTE one_after_length integer\n
             \@ATTRIBUTE one_before_length integer\n
             \@ATTRIBUTE words_since_EOS integer\n
             \@ATTRIBUTE words_until_EOS integer\n
             \@ATTRIBUTE spaces_following integer\n
             \@ATTRIBUTE class {EOS, NEOS}\n
             \@DATA\n";

while (<>) {
   @words = split(' ',$_);
   ($class,$id,$L3,$L2,$L1,$C,$R1,$R2,$R3,$Llength,$Rlength,$Nspaces) = @words;

   if ($L3 =~ /^[0-9]/) {print $file "TRUE,";} # -3 is numeric
   else {print $file "FALSE,";}

   if ($L2 =~ /^[.]/) {print $file "fullstop,";} # -2 is fullstop
   elsif ($L2 =~ /^[0-9]/) {print $file "numeric,";} # -2 is numeric
   else {print $file "other,";}

   if ($R2 =~ /^[.]/) {print $file "TRUE,";} # +2 is fullstop
   else {print $file "FALSE,";}

   if ($R1 =~ /^[a-z]/) {print $file "lower,";} # +1 is lowercase
   elsif (&classmember($R1, unlikely_proper_nouns)) {print $file "capital_common,";} # +1 is capital common
   elsif ($R1 eq "<P>") {print $file "np,";} # +1 is new paragraph
   elsif ($R1 =~ /^[,]/) {print $file "comma,";} # +1 is comma
   elsif ($R1 =~ /^[.]/) {print $file "fullstop,";} # +1 is fullstop
   elsif ($R1 =~ /^[0-9]/) {print $file "numeric,";} # +1 is numeric
   elsif ($R1 =~ /^''/) {print $file "quotes,";} # +1 is quotation mark
   else {print $file "other,";}

   if (&classmember($L1, titles)) {print $file "title,";} # -1 is title
   elsif (&classmember($L1, abbrevs)) {print $file "abbrev,";} # -1 is abbreviation
   elsif (&classmember($L1, sentence_internal)) {print $file "internal,";} # -1 is sentence internal
   elsif ($L1 =~ /^''/) {print $file "quotes,";} # -1 is quotes
   else {print $file "other,";}

   if ($L1 =~ /[.]/) {print $file "TRUE,";} # -1 contains a fullstop
   else {print $file "FALSE,";}

   $capitals = () = $L1 =~ /[A-Z]/g; # get number of capital letters in -1

   print $file $capitals, ",", length($R1), ",", length($L1), ",", $Llength, ",", $Rlength, ",", $Nspaces, ",", $class, "\n";
}

# print results
# print "### HW1A asrivat1 - OVERALL CORRECT: ", $correct, " = ", 100 * $correct/($correct + $incorrect),
#      "%\tINCORRECT: ", $incorrect, " = ", 100 * $incorrect/($correct + $incorrect), "%\n";
 
##########################################################
## RET - prints full line for errors and keeps score
##     - $where indicates the rule number responsible for the classification
##
##  This is a useful debugging tool, as after each change in
##  the program one can identify the remaining misclassified
##  training examples and the patterns responsible for them. 
##########################################################
 
sub ret {
   local($where,$trueclass,$id,$givenclass) = @_;
   
   if ($trueclass eq $givenclass) {
      print ".. (at ",$where,") -  ", $_;
      $correct++; 
   }
   else {
      print "XX (at ",$where,") -  ", $_;
      $incorrect++;
   }
   next;
}

##########################################################
## CLASSMEMBER - tests for membership of $key in a given set
##
##  The \L in $set{"\L$key"} is a perl hack to convert a
##  string into all lower case for lookup in a word array
##  insensitive to the capitalization of the original key.
##########################################################

sub classmember{
   local($key,*set) = @_;

   return $set{"\L$key"};
}

##########################################################
## INITIALIZE_SET - loads named associative array with set members   
##########################################################

sub initialize_set{
   local(*set,$where) = @_;
   
    open (FILE,$where) || die "Can't open file $where: $!\n";

    while (<FILE>) {
        chop;
        $set{$_} = 1;
    }
    close (FILE);
}


