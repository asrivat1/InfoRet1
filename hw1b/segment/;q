#!/usr/local/bin/perl -w

############################################################
##  seg_examp1.prl
##
##  seg_examp1.prl < segment.data.train
## 
##
##  Example of how one may begin a simple version of this
##  program. Lines of text are read into a @test_lines array
##  of lines (with length measured in $numb_lines) until a 
##  blank line is reached. Then the lines in the previous 
##  segment are processed.  The array @real_lines stores the
##  values of the correct classifications for the given in-
##  put data, useful for comparison with the segment class-
##  ifications chosen by the program.
############################################################

my @test_lines = ( );    # the current line that we are testing
my @real_lines = ( );    # the correct classification for the current line
my $numb_lines = ( );      # the number of lines in the block that we testing

my $correct   = 0;       # number of correct classifications
my $incorrect = 0;       # number of incorrect classifications
my $line      = undef;
my $prev_blank = 0;
my $dist_BOS  = 0;
my $numb_segs = 0; # tracks the number of segments in a document

# print the first chunk of the ARFF file
open($file, '>', 'cat_data.arff');
print $file "\@RELATION segment\n
             \@ATTRIBUTE numb_lines integer\n
             \@ATTRIBUTE length integer \n
             \@ATTRIBUTE dist_BOS integer \n
             \@ATTRIBUTE init_spaces integer \n
             \@ATTRIBUTE init_tabs integer \n
             \@ATTRIBUTE prop_start_numeric real \n
             \@ATTRIBUTE prop_start_alpha real \n
             \@ATTRIBUTE proportion_strange real \n
             \@ATTRIBUTE first_ends_colon {TRUE, FALSE} \n
             \@ATTRIBUTE num_quoted integer \n
             \@ATTRIBUTE numbered real \n
             \@ATTRIBUTE email {TRUE, FALSE} \n
             \@ATTRIBUTE dashes real \n
             \@ATTRIBUTE prop_spaces real \n
             \@ATTRIBUTE hanging integer \n
             \@ATTRIBUTE prop_cap real \n
             \@ATTRIBUTE allcaps integer \n
             \@ATTRIBUTE US_city {TRUE, FALSE} \n
             \@ATTRIBUTE prop_punctuation real \n
             \@ATTRIBUTE class {NNHEAD, QUOTED, SIG, TABLE, GRAPHIC, HEADL, ADDRESS, ITEM, PTEXT}\n
             \@DATA\n";

while (defined ($line = <STDIN>))
{
    chomp $line;

    if ($line =~ /^#BLANK#/)
    {
        # check if end of document
        if ($prev_blank)
        {
            # now go ahead and process whole document
            &process_segment;

            $dist_BOS = ( );
            $numb_segs = 0;
            @test_lines = ( );
            @real_lines = ( );
            @numb_lines = ( );
        }
        $prev_blank = 1;

        # new segment
        $numb_segs += 1;
        $numb_lines[$numb_segs]  = 0;
        $dist_BOS[$numb_segs] += 1;
    }
    else
    {
        ($test_lines[$numb_segs][ $numb_lines[$numb_segs] ]) = ($line =~ m/^[^\t]+\t(.*)/);
        ($real_lines[$numb_segs][ $numb_lines[$numb_segs] ]) = ($line =~ m/^([^\t]+)\t/  );

        $numb_lines[$numb_segs] += 1;
        $prev_blank = 0;
    }
}

############################################################
## Process segments by applying specialized detectors/
## classifiers to the array of the text lines in the segment 
############################################################


sub process_segment {
    # loop over all segments in this document
    for ($i = 0; $i < $numb_segs; $i++)
    {

        my $cnt;
        $spaces = 0;
        $tabs = 0;
        $numeric = 0;
        $alpha = 0;
        $strange = 0;
        $total_length = 0;
        $colon = "FALSE";
        $quoted = 0;
        $numbered = 0;
        $email = "FALSE";
        $dashes = 0;
        $hanging = 0;
        $capital = 0;
        $allcaps = 0;
        $US_city = "FALSE";
        $punctuation = 0;

        for ($cnt = 0; $cnt < scalar $test_lines[$i]; $cnt++)
        {
            # count the number of spaces the line starts with
            $spaces += length(($test_lines[$i][$cnt] =~ /^( *)/)[0]);

            # count the number of tabs the line starts with
            $tabs += length(($test_lines[$i][$cnt] =~ /^(\t*)/)[0]);

            # check if the first char is numeric or alphabetic
            if ($test_lines[$i][$cnt] =~ /^( *)[0-9]/) { $numeric += 1; }
            elsif ($test_lines[$i][$cnt] =~ /^[A-Za-z]/) { $alpha += 1; }

            # count the number of strange characters (symbols and other ASCII art things)
            $strange += () = $test_lines[$i][$cnt] =~ /[\W \toO]/g;
            $strange = 0 unless $strange;

            # count the total length of the segment
            $total_length += length($test_lines[$i][$cnt]);

            # check if the line ends with a colon
            if ($test_lines[$i][$cnt] =~ /[:]$/) { $colon = "TRUE"; }

            # check if we have a common beginning to a quote
            if ($test_lines[$i][$cnt] =~ /^( *)(\t*)(.{0,3})(>|:)/) { $quoted += 1; }

            # count the number of lines that start with a numbering pattern
            if ($test_lines[$i][$cnt] =~ /^( *)(\t*)\(?(([0-9]+)|([A-Za-z]+))(.|)/) { $numbered += 1; }

            # check for the presence of an email
            if ($test_lines[$i][$cnt] =~ /.+\@.+\..+/) { $email = "TRUE"; }

            # count the number of lines starting with hyphens
            if ($test_lines[$i][$cnt] =~ /^( *)(\t*)\-/) { $dashes += 1; }

            # count the number of hanging lines
            if ($cnt > 0 && length(($test_lines[$i][$cnt] =~ /^( *)/)[0]) >
                    length(($test_lines[$i][$cnt - 1] =~ /^( *)/)[0]))
            {
                $hanging += 1;
            }
            if ($cnt > 0 && length(($test_lines[$i][$cnt] =~ /^(\t*)/)[0]) >
                    length(($test_lines[$i][$cnt - 1] =~ /^(\t*)/)[0]))
            {
                $hanging += 1;
            }

            # count the number of lines that start with capital letters
            if ($test_lines[$i][$cnt] =~ /^(\s*)[A-Z]/) { $capital += 1; }

            # count the numer of lines that are all caps
            if ($test_lines[$i][$cnt] =~ /^(\s*)[A-Z\s0-9\.:\-]+$/) { $allcaps += 1; }

            # check for the presence of a US city
            if ($test_lines[$i][$cnt] =~ /.+, [A-Z][A-Z] [0-9]{5}/) { $US_city = "TRUE"; }
            
            $punctuation += () = $test_lines[$i][$cnt] =~ /[[:punct:]]/g;

        }


        print $file $numb_lines, ",";
        print $file $total_length, ",";
        print $file $dist_BOS, ",";
        print $file $spaces, ",";
        print $file $tabs, ",";
        print $file $numeric / $numb_lines, ",";
        print $file $alpha / $numb_lines, ",";
        print $file $strange / $total_length, ",";
        print $file $colon, ",";
        print $file $quoted, ",";
        print $file $numbered / $numb_lines, ",";
        print $file $email, ",";
        print $file $dashes / $numb_lines, ",";
        print $file $spaces / $total_length, ",";
        print $file $hanging, ",";
        print $file $capital / $numb_lines, ",";
        print $file $allcaps, ",";
        print $file $US_city, ",";
        print $file $punctuation / $total_length, ",";
        print $file $real_lines[0], "\n";

    }
}

